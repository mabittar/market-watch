# Configuração padrão para habilitar todas as regras de lint.
# Adicione à lista de ignorados abaixo se não quiser algumas regras.
# Para ignorar certas regras em módulos específicos, veja `tool.ruff.lint.per-file-ignores` abaixo.
# Para casos individuais de ignorar, prefira inline `# noqa`s dentro do código.

# Versão alvo do Python
target-version = "py310"
line-length = 90
indent-width = 4


# Habilitar Pyflakes (`F`) e um subconjunto dos códigos pycodestyle (`E`) por padrão.
# Ao contrário do Flake8, Ruff não habilita avisos pycodestyle (`W`) ou
# complexidade de McCabe (`C901`) por padrão.
lint.select = [
    "F",  # Pyflakes
    "E",  # Pycodestyle
    "W",  # Pycodestyle
    "UP", # pyupgrade
    "I",  # isort
    "PL", # Pylint
]

# Estender a seleção com regras adicionais
lint.extend-select = [
    "UP",  # pyupgrade
    "D",   # pydocstyle
]

# Permitir correção para todas as regras habilitadas (quando `--fix` for fornecido).
lint.fixable = ["ALL"]
lint.unfixable = []

# Permitir variáveis não utilizadas quando prefixadas com underscore.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Excluir uma variedade de diretórios comumente ignorados.
lint.exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "*.pyi",
    "*.html",
    "*.css",
    "*.js",
    "**/__init__.py",
]

# Regras a serem ignoradas
lint.ignore = [
    "ANN",      # Relacionadas a dicas de tipo, deixo o mypy lidar com isso.
    "COM812",   # "Trailing comma missing". Se o black está feliz, estou feliz.
    "D",        # Relacionadas a docstrings
    "E501",     # "Linha muito longa". Se o black está feliz, estou feliz.
    "EM101",    # "Exceção não deve usar literal de string, atribua a uma variável primeiro"
    "EM102",    # "Exceção não deve usar literal de f-string, atribua a uma variável primeiro"
    "PTH",      # Use Pathlib em vez de os.*. Deve migrar para Pathlib em algum momento.
    "RET504",   # "Atribuição de variável desnecessária antes da instrução `return`"
    "S101",     # "Uso de `assert` detectado"
    "SIM108",   # "Use operador ternário ...". Ternário é prejudicial à legibilidade em alguns casos.
    "TRY003",   # "Evite especificar mensagens longas fora da classe de exceção"
    "FA100",    # "Faltando `from __future__ import annotations` ..." pytest-split suporta uma gama de versões do Python
]

# Máximo de argumentos permitidos
[pylint]
max-args = 4

# Configurações específicas para pydocstyle
[lint.pydocstyle]
convention = "google"

# Mesma configuração que o Black.
# line-length = 90
# indent-width = 4

# Configurações de formatação
[format]
# Como o Black, use aspas duplas para strings.
quote-style = "double"

# Como o Black, indente com espaços, em vez de tabs.
indent-style = "space"

# Como o Black, respeite as vírgulas mágicas de final de linha.
skip-magic-trailing-comma = false

# Como o Black, detecte automaticamente a terminação de linha apropriada.
line-ending = "auto"

# Ignorar `E402` (violações de importação) em todos os arquivos `__init__.py` e em subdiretórios selecionados.
[lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

# Configurações para McCabe
[lint.mccabe]
max-complexity = 8

# Configurações para pep8-naming
[lint.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
    "pydantic.root_validator",
]
